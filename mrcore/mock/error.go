// Code generated by MockGen. DO NOT EDIT.
// Source: error.go

// Package mock_mrcore is a generated GoMock package.
package mock_mrcore

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mrerr "github.com/mondegor/go-sysmess/mrerr"
)

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockErrorHandler) Handle(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", ctx, err)
}

// Handle indicates an expected call of Handle.
func (mr *MockErrorHandlerMockRecorder) Handle(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockErrorHandler)(nil).Handle), ctx, err)
}

// HandleWith mocks base method.
func (m *MockErrorHandler) HandleWith(ctx context.Context, err error, extraHandler func(mrerr.ErrorKind, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleWith", ctx, err, extraHandler)
}

// HandleWith indicates an expected call of HandleWith.
func (mr *MockErrorHandlerMockRecorder) HandleWith(ctx, err, extraHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWith", reflect.TypeOf((*MockErrorHandler)(nil).HandleWith), ctx, err, extraHandler)
}

// MockErrorWrapper is a mock of ErrorWrapper interface.
type MockErrorWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockErrorWrapperMockRecorder
}

// MockErrorWrapperMockRecorder is the mock recorder for MockErrorWrapper.
type MockErrorWrapperMockRecorder struct {
	mock *MockErrorWrapper
}

// NewMockErrorWrapper creates a new mock instance.
func NewMockErrorWrapper(ctrl *gomock.Controller) *MockErrorWrapper {
	mock := &MockErrorWrapper{ctrl: ctrl}
	mock.recorder = &MockErrorWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorWrapper) EXPECT() *MockErrorWrapperMockRecorder {
	return m.recorder
}

// WrapError mocks base method.
func (m *MockErrorWrapper) WrapError(err error, attrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{err}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WrapError", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WrapError indicates an expected call of WrapError.
func (mr *MockErrorWrapperMockRecorder) WrapError(err interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapError", reflect.TypeOf((*MockErrorWrapper)(nil).WrapError), varargs...)
}

// MockUseCaseErrorWrapper is a mock of UseCaseErrorWrapper interface.
type MockUseCaseErrorWrapper struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseErrorWrapperMockRecorder
}

// MockUseCaseErrorWrapperMockRecorder is the mock recorder for MockUseCaseErrorWrapper.
type MockUseCaseErrorWrapperMockRecorder struct {
	mock *MockUseCaseErrorWrapper
}

// NewMockUseCaseErrorWrapper creates a new mock instance.
func NewMockUseCaseErrorWrapper(ctrl *gomock.Controller) *MockUseCaseErrorWrapper {
	mock := &MockUseCaseErrorWrapper{ctrl: ctrl}
	mock.recorder = &MockUseCaseErrorWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseErrorWrapper) EXPECT() *MockUseCaseErrorWrapperMockRecorder {
	return m.recorder
}

// IsNotFoundOrNotAffectedError mocks base method.
func (m *MockUseCaseErrorWrapper) IsNotFoundOrNotAffectedError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundOrNotAffectedError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundOrNotAffectedError indicates an expected call of IsNotFoundOrNotAffectedError.
func (mr *MockUseCaseErrorWrapperMockRecorder) IsNotFoundOrNotAffectedError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundOrNotAffectedError", reflect.TypeOf((*MockUseCaseErrorWrapper)(nil).IsNotFoundOrNotAffectedError), err)
}

// WrapErrorFailed mocks base method.
func (m *MockUseCaseErrorWrapper) WrapErrorFailed(err error, attrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{err}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WrapErrorFailed", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WrapErrorFailed indicates an expected call of WrapErrorFailed.
func (mr *MockUseCaseErrorWrapperMockRecorder) WrapErrorFailed(err interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapErrorFailed", reflect.TypeOf((*MockUseCaseErrorWrapper)(nil).WrapErrorFailed), varargs...)
}

// WrapErrorNotFoundOrFailed mocks base method.
func (m *MockUseCaseErrorWrapper) WrapErrorNotFoundOrFailed(err error, attrs ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{err}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WrapErrorNotFoundOrFailed", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// WrapErrorNotFoundOrFailed indicates an expected call of WrapErrorNotFoundOrFailed.
func (mr *MockUseCaseErrorWrapperMockRecorder) WrapErrorNotFoundOrFailed(err interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapErrorNotFoundOrFailed", reflect.TypeOf((*MockUseCaseErrorWrapper)(nil).WrapErrorNotFoundOrFailed), varargs...)
}
