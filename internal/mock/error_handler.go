// Code generated by MockGen. DO NOT EDIT.
// Source: error_handler.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mrerr "github.com/mondegor/go-sysmess/mrerr"
)

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockErrorHandler) Handle(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", ctx, err)
}

// Handle indicates an expected call of Handle.
func (mr *MockErrorHandlerMockRecorder) Handle(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockErrorHandler)(nil).Handle), ctx, err)
}

// HandleWith mocks base method.
func (m *MockErrorHandler) HandleWith(ctx context.Context, err error, extraHandler func(mrerr.ErrorKind, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleWith", ctx, err, extraHandler)
}

// HandleWith indicates an expected call of HandleWith.
func (mr *MockErrorHandlerMockRecorder) HandleWith(ctx, err, extraHandler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleWith", reflect.TypeOf((*MockErrorHandler)(nil).HandleWith), ctx, err, extraHandler)
}
