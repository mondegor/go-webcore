// Code generated by MockGen. DO NOT EDIT.
// Source: trace_manager.go

// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTraceManager is a mock of TraceManager interface.
type MockTraceManager struct {
	ctrl     *gomock.Controller
	recorder *MockTraceManagerMockRecorder
}

// MockTraceManagerMockRecorder is the mock recorder for MockTraceManager.
type MockTraceManagerMockRecorder struct {
	mock *MockTraceManager
}

// NewMockTraceManager creates a new mock instance.
func NewMockTraceManager(ctrl *gomock.Controller) *MockTraceManager {
	mock := &MockTraceManager{ctrl: ctrl}
	mock.recorder = &MockTraceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceManager) EXPECT() *MockTraceManagerMockRecorder {
	return m.recorder
}

// NewContextWithIDs mocks base method.
func (m *MockTraceManager) NewContextWithIDs(originalCtx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContextWithIDs", originalCtx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// NewContextWithIDs indicates an expected call of NewContextWithIDs.
func (mr *MockTraceManagerMockRecorder) NewContextWithIDs(originalCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContextWithIDs", reflect.TypeOf((*MockTraceManager)(nil).NewContextWithIDs), originalCtx)
}

// RequestID mocks base method.
func (m *MockTraceManager) RequestID(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestID", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// RequestID indicates an expected call of RequestID.
func (mr *MockTraceManagerMockRecorder) RequestID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestID", reflect.TypeOf((*MockTraceManager)(nil).RequestID), ctx)
}

// WithCorrelationID mocks base method.
func (m *MockTraceManager) WithCorrelationID(ctx context.Context, id string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCorrelationID", ctx, id)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithCorrelationID indicates an expected call of WithCorrelationID.
func (mr *MockTraceManagerMockRecorder) WithCorrelationID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCorrelationID", reflect.TypeOf((*MockTraceManager)(nil).WithCorrelationID), ctx, id)
}

// WithGeneratedProcessID mocks base method.
func (m *MockTraceManager) WithGeneratedProcessID(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGeneratedProcessID", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithGeneratedProcessID indicates an expected call of WithGeneratedProcessID.
func (mr *MockTraceManagerMockRecorder) WithGeneratedProcessID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGeneratedProcessID", reflect.TypeOf((*MockTraceManager)(nil).WithGeneratedProcessID), ctx)
}

// WithGeneratedRequestID mocks base method.
func (m *MockTraceManager) WithGeneratedRequestID(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGeneratedRequestID", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithGeneratedRequestID indicates an expected call of WithGeneratedRequestID.
func (mr *MockTraceManagerMockRecorder) WithGeneratedRequestID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGeneratedRequestID", reflect.TypeOf((*MockTraceManager)(nil).WithGeneratedRequestID), ctx)
}

// WithGeneratedTaskID mocks base method.
func (m *MockTraceManager) WithGeneratedTaskID(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGeneratedTaskID", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithGeneratedTaskID indicates an expected call of WithGeneratedTaskID.
func (mr *MockTraceManagerMockRecorder) WithGeneratedTaskID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGeneratedTaskID", reflect.TypeOf((*MockTraceManager)(nil).WithGeneratedTaskID), ctx)
}

// WithGeneratedWorkerID mocks base method.
func (m *MockTraceManager) WithGeneratedWorkerID(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithGeneratedWorkerID", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithGeneratedWorkerID indicates an expected call of WithGeneratedWorkerID.
func (mr *MockTraceManagerMockRecorder) WithGeneratedWorkerID(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithGeneratedWorkerID", reflect.TypeOf((*MockTraceManager)(nil).WithGeneratedWorkerID), ctx)
}
