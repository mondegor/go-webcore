// Code generated by MockGen. DO NOT EDIT.
// Source: task_scheduler.go

// Package mock_schedule is a generated GoMock package.
package mock_schedule

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcontextEmbedder is a mock of contextEmbedder interface.
type MockcontextEmbedder struct {
	ctrl     *gomock.Controller
	recorder *MockcontextEmbedderMockRecorder
}

// MockcontextEmbedderMockRecorder is the mock recorder for MockcontextEmbedder.
type MockcontextEmbedderMockRecorder struct {
	mock *MockcontextEmbedder
}

// NewMockcontextEmbedder creates a new mock instance.
func NewMockcontextEmbedder(ctrl *gomock.Controller) *MockcontextEmbedder {
	mock := &MockcontextEmbedder{ctrl: ctrl}
	mock.recorder = &MockcontextEmbedderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcontextEmbedder) EXPECT() *MockcontextEmbedderMockRecorder {
	return m.recorder
}

// WithTaskIDContext mocks base method.
func (m *MockcontextEmbedder) WithTaskIDContext(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTaskIDContext", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithTaskIDContext indicates an expected call of WithTaskIDContext.
func (mr *MockcontextEmbedderMockRecorder) WithTaskIDContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTaskIDContext", reflect.TypeOf((*MockcontextEmbedder)(nil).WithTaskIDContext), ctx)
}

// WithWorkerIDContext mocks base method.
func (m *MockcontextEmbedder) WithWorkerIDContext(ctx context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithWorkerIDContext", ctx)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithWorkerIDContext indicates an expected call of WithWorkerIDContext.
func (mr *MockcontextEmbedderMockRecorder) WithWorkerIDContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithWorkerIDContext", reflect.TypeOf((*MockcontextEmbedder)(nil).WithWorkerIDContext), ctx)
}
