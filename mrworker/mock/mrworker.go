// Code generated by MockGen. DO NOT EDIT.
// Source: mrworker.go

// Package mock_mrworker is a generated GoMock package.
package mock_mrworker

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageConsumer is a mock of MessageConsumer interface.
type MockMessageConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockMessageConsumerMockRecorder
}

// MockMessageConsumerMockRecorder is the mock recorder for MockMessageConsumer.
type MockMessageConsumerMockRecorder struct {
	mock *MockMessageConsumer
}

// NewMockMessageConsumer creates a new mock instance.
func NewMockMessageConsumer(ctrl *gomock.Controller) *MockMessageConsumer {
	mock := &MockMessageConsumer{ctrl: ctrl}
	mock.recorder = &MockMessageConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageConsumer) EXPECT() *MockMessageConsumerMockRecorder {
	return m.recorder
}

// CancelMessages mocks base method.
func (m *MockMessageConsumer) CancelMessages(ctx context.Context, messages []any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelMessages", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelMessages indicates an expected call of CancelMessages.
func (mr *MockMessageConsumerMockRecorder) CancelMessages(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelMessages", reflect.TypeOf((*MockMessageConsumer)(nil).CancelMessages), ctx, messages)
}

// CommitMessage mocks base method.
func (m *MockMessageConsumer) CommitMessage(ctx context.Context, message any, preCommit func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitMessage", ctx, message, preCommit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitMessage indicates an expected call of CommitMessage.
func (mr *MockMessageConsumerMockRecorder) CommitMessage(ctx, message, preCommit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitMessage", reflect.TypeOf((*MockMessageConsumer)(nil).CommitMessage), ctx, message, preCommit)
}

// ReadMessages mocks base method.
func (m *MockMessageConsumer) ReadMessages(ctx context.Context, limit uint64) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMessages", ctx, limit)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadMessages indicates an expected call of ReadMessages.
func (mr *MockMessageConsumerMockRecorder) ReadMessages(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessages", reflect.TypeOf((*MockMessageConsumer)(nil).ReadMessages), ctx, limit)
}

// RejectMessage mocks base method.
func (m *MockMessageConsumer) RejectMessage(ctx context.Context, message any, causeErr error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectMessage", ctx, message, causeErr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectMessage indicates an expected call of RejectMessage.
func (mr *MockMessageConsumerMockRecorder) RejectMessage(ctx, message, causeErr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectMessage", reflect.TypeOf((*MockMessageConsumer)(nil).RejectMessage), ctx, message, causeErr)
}

// MockMessageHandler is a mock of MessageHandler interface.
type MockMessageHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageHandlerMockRecorder
}

// MockMessageHandlerMockRecorder is the mock recorder for MockMessageHandler.
type MockMessageHandlerMockRecorder struct {
	mock *MockMessageHandler
}

// NewMockMessageHandler creates a new mock instance.
func NewMockMessageHandler(ctrl *gomock.Controller) *MockMessageHandler {
	mock := &MockMessageHandler{ctrl: ctrl}
	mock.recorder = &MockMessageHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageHandler) EXPECT() *MockMessageHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockMessageHandler) Execute(ctx context.Context, message any) (func(context.Context) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, message)
	ret0, _ := ret[0].(func(context.Context) error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockMessageHandlerMockRecorder) Execute(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockMessageHandler)(nil).Execute), ctx, message)
}

// MockMessageBatchHandler is a mock of MessageBatchHandler interface.
type MockMessageBatchHandler struct {
	ctrl     *gomock.Controller
	recorder *MockMessageBatchHandlerMockRecorder
}

// MockMessageBatchHandlerMockRecorder is the mock recorder for MockMessageBatchHandler.
type MockMessageBatchHandlerMockRecorder struct {
	mock *MockMessageBatchHandler
}

// NewMockMessageBatchHandler creates a new mock instance.
func NewMockMessageBatchHandler(ctrl *gomock.Controller) *MockMessageBatchHandler {
	mock := &MockMessageBatchHandler{ctrl: ctrl}
	mock.recorder = &MockMessageBatchHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageBatchHandler) EXPECT() *MockMessageBatchHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockMessageBatchHandler) Execute(ctx context.Context, messages [][]byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockMessageBatchHandlerMockRecorder) Execute(ctx, messages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockMessageBatchHandler)(nil).Execute), ctx, messages)
}

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Caption mocks base method.
func (m *MockTask) Caption() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Caption")
	ret0, _ := ret[0].(string)
	return ret0
}

// Caption indicates an expected call of Caption.
func (mr *MockTaskMockRecorder) Caption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Caption", reflect.TypeOf((*MockTask)(nil).Caption))
}

// Do mocks base method.
func (m *MockTask) Do(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockTaskMockRecorder) Do(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockTask)(nil).Do), ctx)
}

// Period mocks base method.
func (m *MockTask) Period() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Period")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Period indicates an expected call of Period.
func (mr *MockTaskMockRecorder) Period() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Period", reflect.TypeOf((*MockTask)(nil).Period))
}

// SignalDo mocks base method.
func (m *MockTask) SignalDo() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignalDo")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// SignalDo indicates an expected call of SignalDo.
func (mr *MockTaskMockRecorder) SignalDo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignalDo", reflect.TypeOf((*MockTask)(nil).SignalDo))
}

// Startup mocks base method.
func (m *MockTask) Startup() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Startup")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Startup indicates an expected call of Startup.
func (mr *MockTaskMockRecorder) Startup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Startup", reflect.TypeOf((*MockTask)(nil).Startup))
}

// Timeout mocks base method.
func (m *MockTask) Timeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Timeout indicates an expected call of Timeout.
func (mr *MockTaskMockRecorder) Timeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timeout", reflect.TypeOf((*MockTask)(nil).Timeout))
}

// MockJob is a mock of Job interface.
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob.
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance.
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockJob) Do(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockJobMockRecorder) Do(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockJob)(nil).Do), ctx)
}
